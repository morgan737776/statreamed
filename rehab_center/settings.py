"""
Django settings for rehab_center project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from .seo_settings import *  # Import SEO settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-96_do+xr9_krlz#+r#edn+z$*=$eqrwec3&mu3rn#ra($p!kc2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Set to False in production

# For development only - specify exact hosts in production
ALLOWED_HOSTS = ['localhost', '127.0.0.1'] if DEBUG else ['your-domain.com']

# Security middleware settings
SECURE_HSTS_SECONDS = 31536000  # 1 year in seconds - enable for production
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_SSL_REDIRECT = False  # Set to True when using HTTPS in production
SESSION_COOKIE_SECURE = False  # Set to True in production
CSRF_COOKIE_SECURE = False  # Set to True in production

# Content Security Policy (CSP) settings will be handled by CSPMiddleware

# Запускаем оптимизации при запуске сервера
import django
from django.conf import settings
from .optimizations import run_optimizations
if not settings.DEBUG:
    run_optimizations()

# Application definition

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

INSTALLED_APPS = [
    # Django Core & Contrib Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.humanize',
    'django.contrib.postgres',
    'django.contrib.redirects',
    'django.contrib.flatpages',
    'django.contrib.admindocs',

    # Third-party Apps
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_select2',
    'formtools',
    # 'axes',  # Временно отключено
    'auditlog',
    'guardian',
    'fhir.resources',
    'hl7apy',
    'zeep',

    # Debug tools (only in development)
    'debug_toolbar' if DEBUG else '',

    # Local Apps
    'api',
    'core.apps.CoreConfig',
    'inpatient.apps.InpatientConfig',
    'medical_history.apps.MedicalHistoryConfig',
    'documents.apps.DocumentsConfig',
    'rehab_programs.apps.RehabProgramsConfig',
    'commissions.apps.CommissionsConfig',
    'analytics.apps.AnalyticsConfig',
    'patient_portal.apps.PatientPortalConfig',
    'emr.apps.EmrConfig',
    'services.apps.ServicesConfig',
    'rehabilitation.apps.RehabilitationConfig',
    'medical_codes.apps.MedicalCodesConfig',
    'integrations.apps.IntegrationsConfig',
]

INSTALLED_APPS = [app for app in INSTALLED_APPS if app]  # Удаляем пустые строки из INSTALLED_APPS

MIDDLEWARE = [
    # Performance middleware
    'django.middleware.cache.UpdateCacheMiddleware',  # Кэширование
    'django.middleware.http.ConditionalGetMiddleware',  # 304 Not Modified
    'django.middleware.gzip.GZipMiddleware',  # Сжатие GZIP
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Обслуживание статики
    
    # Security middleware
    'django.middleware.security.SecurityMiddleware',
    'rehab_center.csp_middleware.CSPMiddleware',  # Custom CSP middleware
    'rehab_center.security.SecurityHeadersMiddleware',  # Security headers
    'rehab_center.security.IPRestrictionMiddleware',  # IP restrictions
    
    # Session and auth
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # Security
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    
    # Debug and performance
    'rehab_center.middleware.RequestTimeMiddleware',  # Request timing
    'rehab_center.middleware.DatabaseQueryCountMiddleware',  # Query counting
    'rehab_center.middleware.CacheControlMiddleware',  # Cache control headers
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # Debug Toolbar
    
    # Cache fetch must be last
    'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'rehab_center.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,  # Используем стандартный загрузчик приложений
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.theme',  # Add theme context processor
                'rehab_center.context_processors.seo_context',
            ],
            'debug': DEBUG,
            'string_if_invalid': 'INVALID' if DEBUG else '',
            'builtins': [
                'django.templatetags.static',
                'django.templatetags.i18n',
                'django.templatetags.l10n',
                'django.templatetags.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'rehab_center.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Используем SQLite по умолчанию для простоты
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Database Optimization
# https://docs.djangoproject.com/en/5.2/topics/db/optimization/

# Раскомментируйте и настройте для использования PostgreSQL в продакшене
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'rehab_center',
        'USER': 'postgres',
        'PASSWORD': 'your_password',
        'HOST': 'localhost',
        'PORT': '5432',
        'CONN_MAX_AGE': 600,  # 10 минут
        'OPTIONS': {
            'connect_timeout': 5,
            'options': '-c statement_timeout=15000ms -c idle_in_transaction_session_timeout=10000',
            'client_encoding': 'UTF8',
            'default_transaction_isolation': 'read committed',
        },
    }
}
"""

# Database Performance Settings
if not DEBUG:
    DATABASES['default']['CONN_MAX_AGE'] = 300  # 5 minutes
    DATABASES['default']['ATOMIC_REQUESTS'] = False  # Better performance when disabled

# Database query optimization (for PostgreSQL only)
if 'postgresql' in DATABASES['default']['ENGINE']:
    DATABASES['default']['DISABLE_SERVER_SIDE_CURSORS'] = False  # Enable for large result sets
    
    if 'OPTIONS' not in DATABASES['default']:
        DATABASES['default']['OPTIONS'] = {}
        
    DATABASES['default']['OPTIONS'].update({
        'connect_timeout': 5,  # seconds
        'keepalives': 1,
        'keepalives_idle': 30,  # seconds
        'keepalives_interval': 10,  # seconds
        'keepalives_count': 5,
    })
    
    # Add PostgreSQL specific options
    if 'options' not in DATABASES['default']['OPTIONS']:
        DATABASES['default']['OPTIONS']['options'] = ''
    
    DATABASES['default']['OPTIONS']['options'] += ' -c statement_timeout=15000ms'
    DATABASES['default']['OPTIONS']['options'] += ' -c idle_in_transaction_session_timeout=10000'
    DATABASES['default']['OPTIONS']['options'] += ' -c lock_timeout=5000'
    DATABASES['default']['OPTIONS']['options'] += ' -c idle_session_timeout=300000'

# Query optimization settings
DATABASE_OPTIMIZATION = {
    'DEFAULT_TIMEOUT': 15,  # seconds
    'MAX_QUERIES': 50,  # Maximum queries per request
    'MAX_QUERY_DURATION': 10,  # seconds
}

# Disable persistent connections in development
if DEBUG:
    DATABASES['default']['CONN_MAX_AGE'] = 0

# Database router for read replicas (если нужно)
# DATABASE_ROUTERS = ['path.to.router.DatabaseRouter']

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'file': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['mail_admins', 'file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console' if DEBUG else 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        '': {
            'handlers': ['file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 10},
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            'IGNORE_EXCEPTIONS': True,
            'SOCKET_CONNECT_TIMEOUT': 5,  # seconds
            'SOCKET_TIMEOUT': 5,  # seconds
            'PICKLE_VERSION': -1,  # Use the latest protocol version
            'PARSER_CLASS': 'redis.connection.HiredisParser',
        },
        'TIMEOUT': 60 * 60 * 24 * 7,  # 1 week
        'KEY_PREFIX': 'rehab_',
    },
    'sessions': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PICKLE_VERSION': -1,
        }
    }
}

# Session cache settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG
SESSION_SAVE_EVERY_REQUEST = False  # Better performance when False
SESSION_FILE_PATH = None
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_DOMAIN = None
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_PATH = '/'
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Using cached_db for better performance

# Session security settings
CSRF_COOKIE_SECURE = not DEBUG
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_AGE = 31449600  # 1 year in seconds
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'same-origin'

# Cache settings for views
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 3600  # 1 hour
CACHE_MIDDLEWARE_KEY_PREFIX = 'rehab_cache_'
CACHE_MIDDLEWARE_SECONDARY_CACHE = 'sessions'  # Fallback cache

# View cache settings
VIEW_CACHE_TIMEOUT = 60 * 15  # 15 minutes
CACHE_CONTROL_MAX_AGE = 3600  # 1 hour
CACHE_CONTROL_STALE_IF_ERROR = 86400  # 1 day
CACHE_CONTROL_STALE_WHILE_REVALIDATE = 60 * 60 * 24 * 7  # 1 week

# Template settings
TEMPLATE_DEBUG = DEBUG
TEMPLATE_STRING_IF_INVALID = 'INVALID' if DEBUG else ''

# Per-site cache settings
CACHE_MIDDLEWARE_ANONYMOUS_ONLY = True  # Only cache anonymous users
CACHE_MIDDLEWARE_KEY_FUNCTION = 'rehab_center.cache.cache_key_generator'

# Static files optimization
# https://whitenoise.readthedocs.io/en/stable/django.html

# Static files finders for better performance
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'compressor.finders.CompressorFinder',  # Uncomment if using django-compressor
]

# File upload settings
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Static files optimization settings
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# WhiteNoise settings for better performance
WHITENOISE_MAX_AGE = 31536000  # 1 year
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True
WHITENOISE_INDEX_FILE = True
WHITENOISE_KEEP_ONLY_HASHED_FILES = True
WHITENOISE_ADD_HEADERS_FUNCTION = 'whitenoise.storage.add_never_cache_headers'
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ('jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br', 'swf', 'flv', 'woff', 'woff2')
WHITENOISE_MIMETYPES = {
    '.js': 'application/javascript',
    '.css': 'text/css',
    '.json': 'application/json',
    '.html': 'text/html',
    '.txt': 'text/plain',
    '.svg': 'image/svg+xml',
    '.webmanifest': 'application/manifest+json',
}

# Static files compression
WHITENOISE_COMPRESS_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Настройки сжатия
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = not DEBUG
COMPRESS_CSS_HASHING_METHOD = 'content'
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
]
COMPRESS_STORAGE = 'compressor.storage.GzipCompressorFileStorage'

# Enable GZIP compression for faster page loads
MIDDLEWARE.insert(1, 'django.middleware.gzip.GZipMiddleware')

# Cache settings for better performance
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Session and cache settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'

# Template caching - используем кэшированный загрузчик только в продакшене
if not DEBUG:
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        ('django.template.loaders.cached.Loader', [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]),
    ]
    # Отключаем APP_DIRS, так как мы используем явные загрузчики
    TEMPLATES[0]['APP_DIRS'] = False

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Ensure the directories exist
os.makedirs(STATIC_ROOT, exist_ok=True)
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Add whitenoise for static files in production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Настройки кэширования
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 3600,
    }
}

# Оптимизация статических файлов
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Оптимизация загрузки моделей
INSTALLED_APPS = [app for app in INSTALLED_APPS if app]  # Удаляем пустые строки из INSTALLED_APPS

# Оптимизация базы данных
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 30,
        }
    }
}

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Site ID for Django sites framework
SITE_ID = 1

# Google Analytics
GOOGLE_ANALYTICS_JS = True

# Email settings for development (prints emails to console)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Celery Configuration Options
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Celery Beat Settings
CELERY_BEAT_SCHEDULE = {
    'send-appointment-reminders-every-day': {
        'task': 'core.tasks.send_appointment_reminders',
        'schedule': 3600.0, # Runs every hour for testing. Use crontab(hour=7, minute=0) for daily runs.
    },
}

# Cache settings for better performance
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Compression and caching for static files
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Redirect users after login and logout
LOGIN_REDIRECT_URL = '/'
# Исправлено для корректного редиректа и аутентификации (исправляет ошибку 404 /accounts/login/)
LOGIN_URL = '/login/'
LOGOUT_REDIRECT_URL = '/login/'


# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# EMR Settings
EMR_SETTINGS = {
    'DOCUMENT_STORAGE_DAYS': 5 * 365,  # 5 years for regular documents
    'MEDICAL_RECORD_STORAGE_DAYS': 25 * 365,  # 25 years for medical records
    'ENCRYPTION_KEYS_DIR': BASE_DIR / 'encryption_keys',
    'AUDIT_LOG_DIR': BASE_DIR / 'logs/audit',
}

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

# django-axes settings
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = 1  # hours
AXES_LOCKOUT_TEMPLATE = 'core/lockout.html'
AXES_RESET_ON_SUCCESS = True

# django-guardian settings
ANONYMOUS_USER_NAME = 'anonymous_guardian'

# django-auditlog settings
AUDITLOG_INCLUDE_ALL_MODELS = True

# REST Framework settings (пример)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# .env file loading (python-dotenv)
from dotenv import load_dotenv
load_dotenv(dotenv_path=BASE_DIR / '.env')

# Переопределяем секреты/настройки из переменных окружения, если они заданы
SECRET_KEY = os.getenv('SECRET_KEY', SECRET_KEY)
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.yandex.ru')

# Настройки аутентификации
LOGIN_URL = 'core:login'  # URL для входа
LOGIN_REDIRECT_URL = 'core:dashboard'  # Куда перенаправлять после успешного входа
LOGOUT_REDIRECT_URL = 'core:login'  # Куда перенаправлять после выхода

# Настройки сессии
SESSION_COOKIE_AGE = 1209600  # 2 недели в секундах
SESSION_SAVE_EVERY_REQUEST = True  # Обновлять время сессии при каждом запросе

# Настройки CSRF
CSRF_USE_SESSIONS = True  # Хранить CSRF токен в сессии
CSRF_COOKIE_HTTPONLY = True  # Запретить доступ к CSRF куке из JavaScript

# Настройки аутентификации
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'core.auth_backends.EmailBackend',  # Раскомментируйте, если нужна аутентификация по email
]

# Настройки паролей
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Настройки безопасности
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'password_here')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@example.com')

# Email settings (замените на реальные SMTP-данные вашей организации)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'noreply@example.com'
EMAIL_USE_TLS = True

# AUTHENTICATION_BACKENDS для axes + guardian (современный вариант для Django 5.x)
AUTHENTICATION_BACKENDS = [
    # 'axes.backends.AxesStandaloneBackend',  # Brute-force protection - временно отключено
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
]

# Локальные настройки, если нужно
try:
    from .local_settings import *
except ImportError:
    pass

# DRF settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# ===================================================================
# НАСТРОЙКИ БЕЗОПАСНОСТИ
# ===================================================================

# Настройки сессий для безопасности
SESSION_COOKIE_SECURE = not DEBUG  # True для продакшн
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 3600  # 1 час
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Настройки CSRF для безопасности
CSRF_COOKIE_SECURE = not DEBUG  # True для продакшн
CSRF_COOKIE_HTTPONLY = True
CSRF_USE_SESSIONS = True

# Настройки безопасности для паролей
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Настройки безопасности HTTP
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# В продакшн среде должны быть включены:
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Настройки логирования для безопасности
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'security.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'rehab_center.security': {
            'handlers': ['security_file', 'console'] if DEBUG else ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'integrations': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}